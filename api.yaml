openapi: 3.0.0
servers:
  - description: GroundX Base URL
    url: https://api.groundx.ai/api
info:
  description: This is an OpenAPI description of the GroundX APIs
  version: "1.0.0"
  title: GroundX API
  contact:
    email: support@groundx.ai
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /inventory:
    get:
      summary: searches inventory
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '400':
          description: bad input parameter
    post:
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
        description: Inventory item to add

  /v1/project/{projectId}:
    get:
      summary: Look up an existing project
      description: This endpoint allows you to retrieve a specific project by projectId.
      operationId: getProjectById
      parameters:
        - in: path
          name: projectId
          required: true
          description: The ID of the project to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
    put:
      summary: Update an existing project
      description: This endpoint allows you to update an existing project.
      operationId: updateProject
      parameters:
        - in: path
          name: projectId
          required: true
          description: The ID of the project to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: Successful update of project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
    delete:
      summary: Delete an existing project
      description: This endpoint allows you to delete your existing projects.
      operationId: deleteProject
      parameters:
        - in: path
          name: projectId
          required: true
          description: The ID of the project to delete.
          schema:
            type: string
      responses:
        '200':
          description: Successful deletion of project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /v1/project:
    get:
      summary: Look up existing projects
      description: This endpoint allows you to retrieve your existing projects.
      operationId: getProjects
      responses:
        '200':
          description: Successful retrieval of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectDetail'
    post:
      summary: Create a project
      description: This endpoint allows you to initialize a new project.
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '200':
          description: Successful creation of project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

  # Bucket API paths
  /v1/bucket/{bucketId}:
    get:
      summary: Look up an existing bucket
      description: Look up a bucket by its bucketId.
      operationId: getBucketById
      parameters:
        - in: path
          name: bucketId
          required: true
          description: The ID of the bucket to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketResponse'
        '400':
          description: Invalid bucket ID
        '401':
          description: Permission denied
    put:
      summary: Update an existing bucket
      description: Update the configurations of an existing bucket.
      operationId: updateBucket
      parameters:
        - in: path
          name: bucketId
          required: true
          description: The ID of the bucket to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BucketUpdateRequest'
      responses:
        '200':
          description: Bucket successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketResponse'
        '400':
          description: Invalid body parameter
        '401':
          description: Permission denied
    delete:
      summary: Delete an existing bucket
      description: Deletes a bucket by bucketId.
      operationId: deleteBucket
      parameters:
        - in: path
          name: bucketId
          required: true
          description: The ID of the bucket to delete.
          schema:
            type: string
      responses:
        '200':
          description: Bucket successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid bucket ID
        '401':
          description: Permission denied

  /v1/bucket:
    get:
      summary: Look up existing buckets
      description: Look up existing buckets associated with your account.
      operationId: getBuckets
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                type: object
                properties:
                  buckets:
                    type: array
                    items:
                      $ref: '#/components/schemas/BucketDetail'
        '401':
          description: Permission denied
    post:
      summary: Create a bucket
      description: Create a new bucket for your content.
      operationId: createBucket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BucketCreateRequest'
      responses:
        '200':
          description: Bucket successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketResponse'
        '400':
          description: Invalid body parameter
        '401':
          description: Permission denied

  /ingest/document/{documentId}:
    get:
      summary: Look up an existing document
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        400:
          description: Invalid document ID
        401:
          description: Permission denied

    delete:
      summary: Delete documents
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Documents successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Invalid document ID
        401:
          description: Permission denied

  /ingest/documents:
    get:
      summary: Look up all existing documents
      responses:
        200:
          description: Look up success
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResponse'
        401:
          description: Permission denied

    post:
      summary: Upload hosted documents to GroundX
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUploadRequest'
      responses:
        200:
          description: Documents successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'
        400:
          description: Invalid document type or source URL
        401:
          description: Permission denied

  /ingest/documents/{id}:
    get:
      summary: Look up existing documents by processId, bucketId, or projectId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Look up success
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentResponse'
        401:
          description: Permission denied

  /ingest/{processId}:
    get:
      summary: Look up document processing status by processId
      parameters:
        - name: processId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessStatusResponse'
        401:
          description: Permission denied

components:
  schemas:
    ProjectCreateRequest:
      type: object
      properties:
        project:
          type: object
          properties:
            name:
              type: string
    ProjectResponse:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/ProjectDetail'
    InventoryItem:
      type: object
      required:
        - id
        - name
        - manufacturer
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Widget Adapter
        releaseDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
    Manufacturer:
      required:
        - name
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: 'https://www.acme-corp.com'
        phone:
          type: string
          example: 408-867-5309
      type: object
    ProjectDetail:
      type: object
      properties:
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/BucketDetail'
        created:
          type: string
          format: date-time
        fileCount:
          type: integer
        fileSize:
          type: string
        projectId:
          type: string
        name:
          type: string
        updated:
          type: string
          format: date-time
    BucketDetail:
      type: object
      properties:
        bucketId:
          type: string
        fileCount:
          type: integer
        fileSize:
          type: string
        name:
          type: string
    BucketResponse:
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/BucketDetail'
    BucketCreateRequest:
      type: object
      properties:
        bucket:
          type: object
          properties:
            name:
              type: string
    BucketUpdateRequest:
      type: object
      properties:
        bucket:
          type: object
          properties:
            name:
              type: string
    ProjectUpdateRequest:
      type: object
      properties:
        project:
          type: object
          properties:
            name:
              type: string
    DocumentResponse:
      type: object
      properties:
        document:
          type: object
          properties:
            bucketId:
              type: string
            documentId:
              type: string
            fileName:
              type: string
            fileSize:
              type: string
            fileType:
              type: string
            metadata:
              type: object
            processId:
              type: string
            processedUrl:
              type: string
            sourceUrl:
              type: string
            status:
              type: string
            statusMessage:
              type: string

    DocumentUploadRequest:
      type: object
      properties:
        documents:
          type: array
          items:
            type: object
            properties:
              bucketId:
                type: integer
              sourceUrl:
                type: string
              callbackData:
                type: string
              callbackUrl:
                type: string
              metadata:
                type: object
              type:
                type: string
                enum:
                  - txt
                  - docx
                  - pptx
                  - xlsx
                  - pdf
                  - png
                  - jpg

    IngestResponse:
      type: object
      properties:
        ingest:
          type: object
          properties:
            processId:
              type: string
            status:
              type: string

    ProcessStatusResponse:
      type: object
      properties:
        ingest:
          type: object
          properties:
            processId:
              type: string
            progress:
              type: object
              properties:
                complete:
                  type: object
                  properties:
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentResponse'
                    total:
                      type: integer
                errors:
                  type: object
                  properties:
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentResponse'
                    total:
                      type: integer
                processing:
                  type: object
                  properties:
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentResponse'
                    total:
                      type: integer
            status:
              type: string
            statusMessage:
              type: string
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
security:
  - ApiKeyAuth: []
