openapi: 3.0.0
info:
  title: GroundX API
  description: Ground Your RAG Apps in Fact not Fiction
  version: 1.0.0
  contact:
    email: support@groundx.ai
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - description: GroundX Base URL
    url: https://api.groundx.ai/api
tags:
  - name: Documents
  - name: Search
  - name: Projects
  - name: Buckets
paths:
  /v1/ingest/documents/remote:
    post:
      tags:
        - Documents
      summary: Upload hosted documents to GroundX
      operationId: Document_uploadRemote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentRemoteUploadRequest'
      responses:
        '200':
          description: Documents successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'
        '400':
          description: Invalid document type or source URL
        '401':
          description: Unauthorized to update bucket with given ID
  /v1/ingest/documents/local:
    post:
      tags:
        - Documents
      summary: Upload local documents to GroundX
      operationId: Document_uploadLocal
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentLocalUploadRequest'
      responses:
        '200':
          description: Documents successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'
        '400':
          description: Invalid document type or source URL
        '401':
          description: Unauthorized to update bucket with ID
  /v1/ingest/documents/website:
    post:
      tags:
        - Documents
      summary: Crawl and ingest a website into GroundX
      operationId: Document_crawlWebsite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebsiteCrawlRequest'
      responses:
        '200':
          description: Website successfully queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'
        '400':
          description: Invalid source URL
        '401':
          description: Unauthorized to update bucket with given ID
  /v1/ingest/{processId}:
    get:
      tags:
        - Documents
      summary: Look up the processing status of documents for a given processId
      operationId: Document_getProcessingStatusById
      parameters:
        - name: processId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessStatusResponse'
        '400':
          description: Invalid process ID
        '401':
          description: Unauthorized to access process with given ID
  /v1/ingest/documents/{id}:
    get:
      tags:
        - Documents
      summary: Look up existing documents by processId, bucketId, or projectId
      operationId: Document_lookup
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: n
          in: query
          required: false
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentLookupResponse'
        '400':
          description: Invalid process, bucket, or project ID
        '401':
          description: Unauthorized to access process, bucket, or project with given ID
  /v1/ingest/documents:
    get:
      tags:
        - Documents
      summary: Look up all existing documents
      operationId: Document_list
      parameters:
        - name: n
          in: query
          required: false
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'
    delete:
      tags:
        - Documents
      summary: Delete one or more documents from GroundX
      operationId: Documents_delete
      parameters:
        - name: documentIds
          in: query
          description: A comma delimited list of document IDs
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
          explode: false
      responses:
        '200':
          description: Documents are queued to be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'
        '400':
          description: Invalid document ID
        '401':
          description: Unauthorized to delete document with given ID
  /v1/ingest/document/{documentId}:
    delete:
      tags:
        - Documents
      summary: Delete a document
      operationId: Document_delete
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'
        '400':
          description: Invalid document ID
        '401':
          description: Unauthorized to delete document with given ID
    get:
      tags:
        - Documents
      summary: Look up an existing document by its ID
      operationId: Document_get
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          description: Invalid document ID
        '401':
          description: Unauthorized to access document with given ID
  /v1/search/{id}:
    post:
      tags:
        - Search
      summary: Perform a search query of your content
      operationId: Search_content
      description: Search and retrieve relevant content from a project or bucket by id.
      parameters:
        - description: The ID of the project or bucket to search within.
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Number of results
          in: query
          name: 'n'
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search query success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized to access project or bucket with given ID
  /v1/project:
    get:
      tags:
        - Projects
      summary: Look up existing projects
      operationId: Project_list
      parameters:
        - name: n
          in: query
          required: false
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          schema:
            type: string
      description: This endpoint allows you to retrieve your existing projects.
      responses:
        '200':
          description: Successful retrieval of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
    post:
      tags:
        - Projects
      summary: Create a new project
      operationId: Project_create
      description: This endpoint allows you to create a new project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '200':
          description: Project successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid body parameter
  /v1/project/{projectId}:
    get:
      tags:
        - Projects
      summary: Look up an existing project by its ID
      operationId: Project_get
      description: This endpoint allows you to retrieve a specific project by projectId.
      parameters:
        - description: The ID of the project to retrieve.
          in: path
          name: projectId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful retrieval of project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized to access project with given ID
    put:
      tags:
        - Projects
      summary: Update an existing project
      operationId: Project_update
      description: This endpoint allows you to update an existing project.
      parameters:
        - description: The ID of the project to update.
          in: path
          name: projectId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: Successful update of project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid body parameter
        '401':
          description: Unauthorized to update project with given ID
    delete:
      tags:
        - Projects
      summary: Delete a project
      operationId: Project_delete
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Project successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid project ID
        '401':
          description: Unauthorized to delete project with given ID
  /v1/project/{projectId}/bucket/{bucketId}:
    post:
      tags:
        - Projects
      summary: Add a bucket to a project
      operationId: Project_addBucket
      description: This endpoint allows you to add a bucket to a project.
      parameters:
        - description: The ID of the project to update.
          in: path
          name: projectId
          required: true
          schema:
            type: integer
        - description: The ID of the bucket to update.
          in: path
          name: bucketId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful update of project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid path parameter
        '401':
          description: Unauthorized to update project with given ID
    delete:
      tags:
        - Projects
      summary: Remove a bucket from a project
      operationId: Project_removeBucket
      description: This endpoint allows you to remove a bucket from a project.
      parameters:
        - description: The ID of the project to update.
          in: path
          name: projectId
          required: true
          schema:
            type: integer
        - description: The ID of the bucket to update.
          in: path
          name: bucketId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful update of project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid path parameter
        '401':
          description: Unauthorized to update project with given ID
  /v1/bucket:
    get:
      tags:
        - Buckets
      summary: Look up existing buckets
      operationId: Bucket_list
      parameters:
        - name: n
          in: query
          required: false
          schema:
            type: integer
        - name: nextToken
          in: query
          required: false
          schema:
            type: string
      description: Look up existing buckets associated with your account.
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketListResponse'
    post:
      tags:
        - Buckets
      summary: Create a new bucket
      operationId: Bucket_create
      description: This endpoint allows you to create a new bucket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BucketCreateRequest'
      responses:
        '200':
          description: Bucket successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketResponse'
        '400':
          description: Invalid body parameter
  /v1/bucket/{bucketId}:
    get:
      tags:
        - Buckets
      summary: Look up an existing bucket by its ID
      operationId: Bucket_get
      description: Look up a bucket by its bucketId.
      parameters:
        - description: The ID of the bucket to retrieve.
          in: path
          name: bucketId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Look up success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketResponse'
        '400':
          description: Invalid bucket ID
        '401':
          description: Unauthorized to access bucket with given ID
    put:
      tags:
        - Buckets
      summary: Update an existing bucket
      operationId: Bucket_update
      description: Update the configurations of an existing bucket.
      parameters:
        - description: The ID of the bucket to update.
          in: path
          name: bucketId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BucketUpdateRequest'
      responses:
        '200':
          description: Bucket successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketUpdateResponse'
        '400':
          description: Invalid body parameter
        '401':
          description: Unauthorized to update bucket with given ID
    delete:
      tags:
        - Buckets
      summary: Delete a bucket
      operationId: Bucket_delete
      parameters:
        - name: bucketId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bucket successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid bucket ID
        '401':
          description: Unauthorized to delete bucket with given ID
components:
  schemas:
    SearchRequest:
      type: object
      required:
        - search
      properties:
        search:
          type: object
          required:
            - query
          properties:
            query:
              description: The search query
              type: string
              example: 'my search query'
            nextToken:
              description: Token to retrieve the next set of paginated results
              type: string
              example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9'
    SearchResponse:
      type: object
      required:
        - search
      properties:
        search:
          type: object
          properties:
            count:
              description: Total results
              type: integer
            results:
              type: array
              description: Search results
              items:
                $ref: '#/components/schemas/SearchResultItem'
            query:
              description: The original search request query
              type: string
            score:
              description: Confidence score in the search results
              type: number
            searchQuery:
              description: The actual search query, if the search request query was re-written
              type: string
            text:
              description: Suggested context for LLM completion
              type: string
            nextToken:
              description: For paginated results
              type: string
    SearchResultItem:
      type: object
      properties:
        bucketId:
          description: Content bucket the search result belongs to
          type: integer
        documentId:
          description: Unique system generated ID for the document
          format: uuid
          type: string
        score:
          description: Confidence score in the search result
          type: number
        searchData:
          description: Document, section, and chunk search data, both custom and system-generated
          type: object
        sourceUrl:
          description: Source document URL
          format: uri
          type: string
        suggestedText:
          description: System-generated text, re-written for LLM completions
          type: string
        text:
          description: Original text from the source document
          type: string
    ProjectResponse:
      type: object
      required:
        - project
      properties:
        project:
          $ref: '#/components/schemas/ProjectDetail'
    ProjectDetail:
      type: object
      required:
        - projectId
      properties:
        buckets:
          type: array
          description: The content buckets associated with the project
          items:
            $ref: '#/components/schemas/BucketDetail'
        created:
          type: string
          description: The data time when the project was created, in RFC3339 format
          format: date-time
          example: '2023-10-03T08:59:39.312Z'
        fileCount:
          type: integer
          description: The number of files contained in the content buckets associated with the project
        fileSize:
          type: string
          description: The total file size of files contained in the content buckets associated with the project
          example: 3.1GB
        projectId:
          type: integer
        name:
          type: string
        updated:
          type: string
          description: The data time when the project was last updated, in RFC3339 format
          format: date-time
          example: '2023-10-03T08:59:39.312Z'
    BucketDetail:
      type: object
      required:
        - bucketId
      properties:
        bucketId:
          type: integer
        created:
          type: string
          description: The data time when the bucket was created, in RFC3339 format
          format: date-time
          example: '2023-10-03T08:59:39.312Z'
        fileCount:
          type: integer
          description: The number of files contained in the content bucket
        fileSize:
          type: string
          description: The total file size of files contained in the content bucket
          example: 3.1GB
        name:
          type: string
        updated:
          type: string
          description: The data time when the bucket was last updated, in RFC3339 format
          format: date-time
          example: '2023-10-03T08:59:39.312Z'
    BucketUpdateDetail:
      type: object
      required:
        - bucketId
      properties:
        bucketId:
          type: integer
        name:
          type: string
    BucketResponse:
      type: object
      required:
        - bucket
      properties:
        bucket:
          $ref: '#/components/schemas/BucketDetail'
    BucketUpdateResponse:
      type: object
      required:
        - bucket
      properties:
        bucket:
          $ref: '#/components/schemas/BucketUpdateDetail'
    BucketCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: your_bucket_name
    BucketUpdateRequest:
      type: object
      required:
        - newName
      properties:
        newName:
          type: string
          example: your_bucket_name
    ProjectCreateRequest:
      type: object
      required:
       - name
      properties:
        name:
          type: string
          example: your_project_name
        bucketName:
          type: string
          description: Include a bucket name to automatically create a bucket and add it to this project
          example: your_new_bucket_name
    ProjectUpdateRequest:
      type: object
      required:
       - newName
      properties:
        newName:
          type: string
          example: your_project_name
    DocumentResponse:
      type: object
      properties:
        document:
          type: object
          properties:
            bucketId:
              type: integer
            documentId:
              type: string
              description: Unique system generated ID for the document
              format: uuid
            fileName:
              type: string
            fileSize:
              type: string
              description: The file size of the file stored in GroundX
              example: 1.4MB
            fileType:
              $ref: '#/components/schemas/DocumentType'
            processId:
              type: string
              description: Unique system generated ID for the ingest request
              format: uuid
            searchData:
              type: object
            sourceUrl:
              type: string
              description: Source document URL
              format: uri
            status:
              $ref: "#/components/schemas/ProcessingStatus"
            statusMessage:
              type: string
    DocumentRemoteUploadRequest:
      type: object
      required:
        - documents
      properties:
        documents:
          type: array
          items:
            type: object
            required:
              - bucketId
              - sourceUrl
            properties:
              bucketId:
                type: integer
                example: 1234
              fileName:
                type: string
                example: my_file.txt
              fileType:
                $ref: '#/components/schemas/DocumentType'
              searchData:
                type: object
                example:
                  key: value
              sourceUrl:
                type: string
                description: Source document URL
                format: uri
                example: https://my.source.url.com/file.txt
    DocumentType:
      type: string
      enum:
        - txt
        - docx
        - pptx
        - xlsx
        - pdf
        - png
        - jpg
    DocumentLocalUploadRequest:
      type: array
      items:
        type: object
        required:
          - blob
          - metadata
        properties:
          blob:
            description: The actual file being uploaded.
            type: string
            format: binary
          metadata:
            type: object
            required:
              - bucketId
              - fileName
              - fileType
            properties:
              bucketId:
                type: integer
                example: 1234
              fileName:
                type: string
                example: my_file.txt
              fileType:
                $ref: '#/components/schemas/DocumentType'
              searchData:
                type: object
                example:
                  key: value
    IngestResponse:
      type: object
      required:
        - ingest
      properties:
        ingest:
          type: object
          required:
            - processId
            - status
          properties:
            processId:
              type: string
              format: uuid
            status:
              $ref: "#/components/schemas/ProcessingStatus"
    ProcessStatusResponse:
      type: object
      required:
        - ingest
      properties:
        ingest:
          type: object
          required:
            - processId
            - status
          properties:
            processId:
              type: string
              format: uuid
            progress:
              type: object
              properties:
                cancelled:
                  type: object
                  properties:
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentResponse'
                    total:
                      type: integer
                complete:
                  type: object
                  properties:
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentResponse'
                    total:
                      type: integer
                errors:
                  type: object
                  properties:
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentResponse'
                    total:
                      type: integer
                processing:
                  type: object
                  properties:
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentResponse'
                    total:
                      type: integer
            status:
              $ref: "#/components/schemas/ProcessingStatus"
            statusMessage:
              type: string
    ProcessingStatus:
      type: string
      enum:
        - queued
        - processing
        - error
        - complete
        - cancelled
    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDetail'
    BucketListResponse:
      type: object
      properties:
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/BucketDetail'
    DocumentListResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentResponse'
        nextToken:
          type: string
    DocumentLookupResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentResponse'
        nextToken:
          type: string
    WebsiteCrawlRequest:
      type: object
      required:
        - websites
      properties:
        websites:
          type: array
          items:
            type: object
            required:
              - bucketId
              - sourceUrl
            properties:
              bucketId:
                type: integer
                example: 123
              cap:
                type: integer
                description: The maximum number of pages to crawl
                example: 100
              depth:
                type: integer
                description: The maximum depth of linked pages to follow from the sourceUrl
                example: 3
              searchData:
                type: object
                example:
                  key: value
              sourceUrl:
                type: string
                description: Source website URL
                format: uri
                example: https://my.website.com
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: OK
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
security:
  - ApiKeyAuth: []
