/* tslint:disable */
/* eslint-disable */
/**
 * GroundX API
 * Ground Your RAG Apps in Fact not Fiction
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@groundx.ai
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PreprocessorDeleteRequest } from '../models';
// @ts-ignore
import { PreprocessorResponse } from '../models';
// @ts-ignore
import { PreprocessorResponsePreprocess } from '../models';
// @ts-ignore
import { PreprocessorResponsePreprocessPreprocessorsInner } from '../models';
// @ts-ignore
import { PreprocessorSetupRequest } from '../models';
// @ts-ignore
import { PreprocessorSetupResponse } from '../models';
// @ts-ignore
import { PreprocessorSetupResponsePreprocess } from '../models';
// @ts-ignore
import { PreprocessorSetupResponsePreprocessPreprocessorsInner } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PreprocessorApi - axios parameter creator
 * @export
 */
export const PreprocessorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes existing custom pre-processors that you own or manage.
         * @summary Delete Custom Pre-Processor
         * @param {PreprocessorDeleteRequest} preprocessorDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (preprocessorDeleteRequest: PreprocessorDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preprocessorDeleteRequest' is not null or undefined
            assertParamExists('delete', 'preprocessorDeleteRequest', preprocessorDeleteRequest)
            const localVarPath = `/v1/preprocess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: preprocessorDeleteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(preprocessorDeleteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Look up existing pre-processors your account has access to, including those you have created yourself.
         * @summary Query pre-processors
         * @param {Array<string>} preprocess An array of preprocessor IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (preprocess: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preprocess' is not null or undefined
            assertParamExists('list', 'preprocess', preprocess)
            const localVarPath = `/v1/preprocess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })
            if (preprocess) {
                localVarQueryParameter['preprocess'] = preprocess;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initializes a custom pre-processor that can be applied to your content and search queries.
         * @summary Setup Custom Pre-Processor
         * @param {PreprocessorSetupRequest} preprocessorSetupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setup: async (preprocessorSetupRequest: PreprocessorSetupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preprocessorSetupRequest' is not null or undefined
            assertParamExists('setup', 'preprocessorSetupRequest', preprocessorSetupRequest)
            const localVarPath = `/v1/preprocess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: preprocessorSetupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(preprocessorSetupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreprocessorApi - functional programming interface
 * @export
 */
export const PreprocessorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PreprocessorApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes existing custom pre-processors that you own or manage.
         * @summary Delete Custom Pre-Processor
         * @param {PreprocessorApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: PreprocessorApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Look up existing pre-processors your account has access to, including those you have created yourself.
         * @summary Query pre-processors
         * @param {PreprocessorApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: PreprocessorApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreprocessorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.preprocess, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initializes a custom pre-processor that can be applied to your content and search queries.
         * @summary Setup Custom Pre-Processor
         * @param {PreprocessorApiSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setup(requestParameters: PreprocessorApiSetupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreprocessorSetupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setup(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PreprocessorApi - factory interface
 * @export
 */
export const PreprocessorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PreprocessorApiFp(configuration)
    return {
        /**
         * Deletes existing custom pre-processors that you own or manage.
         * @summary Delete Custom Pre-Processor
         * @param {PreprocessorApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: PreprocessorApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Look up existing pre-processors your account has access to, including those you have created yourself.
         * @summary Query pre-processors
         * @param {PreprocessorApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: PreprocessorApiListRequest, options?: AxiosRequestConfig): AxiosPromise<PreprocessorResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Initializes a custom pre-processor that can be applied to your content and search queries.
         * @summary Setup Custom Pre-Processor
         * @param {PreprocessorApiSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setup(requestParameters: PreprocessorApiSetupRequest, options?: AxiosRequestConfig): AxiosPromise<PreprocessorSetupResponse> {
            return localVarFp.setup(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for delete operation in PreprocessorApi.
 * @export
 * @interface PreprocessorApiDeleteRequest
 */
export type PreprocessorApiDeleteRequest = {
    
} & PreprocessorDeleteRequest

/**
 * Request parameters for list operation in PreprocessorApi.
 * @export
 * @interface PreprocessorApiListRequest
 */
export type PreprocessorApiListRequest = {
    
    /**
    * An array of preprocessor IDs
    * @type {Array<string>}
    * @memberof PreprocessorApiList
    */
    readonly preprocess: Array<string>
    
}

/**
 * Request parameters for setup operation in PreprocessorApi.
 * @export
 * @interface PreprocessorApiSetupRequest
 */
export type PreprocessorApiSetupRequest = {
    
} & PreprocessorSetupRequest

/**
 * PreprocessorApiGenerated - object-oriented interface
 * @export
 * @class PreprocessorApiGenerated
 * @extends {BaseAPI}
 */
export class PreprocessorApiGenerated extends BaseAPI {
    /**
     * Deletes existing custom pre-processors that you own or manage.
     * @summary Delete Custom Pre-Processor
     * @param {PreprocessorApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessorApiGenerated
     */
    public delete(requestParameters: PreprocessorApiDeleteRequest, options?: AxiosRequestConfig) {
        return PreprocessorApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Look up existing pre-processors your account has access to, including those you have created yourself.
     * @summary Query pre-processors
     * @param {PreprocessorApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessorApiGenerated
     */
    public list(requestParameters: PreprocessorApiListRequest, options?: AxiosRequestConfig) {
        return PreprocessorApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initializes a custom pre-processor that can be applied to your content and search queries.
     * @summary Setup Custom Pre-Processor
     * @param {PreprocessorApiSetupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessorApiGenerated
     */
    public setup(requestParameters: PreprocessorApiSetupRequest, options?: AxiosRequestConfig) {
        return PreprocessorApiFp(this.configuration).setup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
