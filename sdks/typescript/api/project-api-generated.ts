/* tslint:disable */
/* eslint-disable */
/**
 * GroundX API
 * Ground Your RAG Apps in Fact not Fiction
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@groundx.ai
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BucketDetail } from '../models';
// @ts-ignore
import { ProjectBindBucket400Response } from '../models';
// @ts-ignore
import { ProjectBindBucketResponse } from '../models';
// @ts-ignore
import { ProjectBucketBinding } from '../models';
// @ts-ignore
import { ProjectBucketBindingProject } from '../models';
// @ts-ignore
import { ProjectCreateRequest } from '../models';
// @ts-ignore
import { ProjectCreateRequestProject } from '../models';
// @ts-ignore
import { ProjectDeleteResponse } from '../models';
// @ts-ignore
import { ProjectDetail } from '../models';
// @ts-ignore
import { ProjectListResponse } from '../models';
// @ts-ignore
import { ProjectResponse } from '../models';
// @ts-ignore
import { ProjectUpdateRequest } from '../models';
// @ts-ignore
import { ProjectUpdateRequestProject } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds the specified bucket to a project.
         * @summary Add an existing bucket to a project
         * @param {number} projectId The ID of the project to add the bucket to.
         * @param {ProjectBucketBinding} projectBucketBinding The bucket ID to add to the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindBucket: async (projectId: number, projectBucketBinding: ProjectBucketBinding, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('bindBucket', 'projectId', projectId)
            // verify required parameter 'projectBucketBinding' is not null or undefined
            assertParamExists('bindBucket', 'projectBucketBinding', projectBucketBinding)
            const localVarPath = `/v1/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectBucketBinding,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectBucketBinding, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to initialize a new project.
         * @summary Create a project
         * @param {ProjectCreateRequest} projectCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (projectCreateRequest: ProjectCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCreateRequest' is not null or undefined
            assertParamExists('create', 'projectCreateRequest', projectCreateRequest)
            const localVarPath = `/v1/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to delete your existing projects.
         * @summary Delete an existing project
         * @param {string} projectId The ID of the project to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('delete', 'projectId', projectId)
            const localVarPath = `/v1/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a specific project by projectId.
         * @summary Look up an existing project
         * @param {string} projectId The ID of the project to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('get', 'projectId', projectId)
            const localVarPath = `/v1/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve your existing projects.
         * @summary Look up existing projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update an existing project.
         * @summary Update an existing project
         * @param {string} projectId The ID of the project to update.
         * @param {ProjectUpdateRequest} projectUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (projectId: string, projectUpdateRequest: ProjectUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('update', 'projectId', projectId)
            // verify required parameter 'projectUpdateRequest' is not null or undefined
            assertParamExists('update', 'projectUpdateRequest', projectUpdateRequest)
            const localVarPath = `/v1/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds the specified bucket to a project.
         * @summary Add an existing bucket to a project
         * @param {ProjectApiBindBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindBucket(requestParameters: ProjectApiBindBucketRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectBindBucketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bindBucket(requestParameters.projectId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to initialize a new project.
         * @summary Create a project
         * @param {ProjectApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: ProjectApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to delete your existing projects.
         * @summary Delete an existing project
         * @param {ProjectApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: ProjectApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve a specific project by projectId.
         * @summary Look up an existing project
         * @param {ProjectApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: ProjectApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve your existing projects.
         * @summary Look up existing projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update an existing project.
         * @summary Update an existing project
         * @param {ProjectApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: ProjectApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.projectId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Adds the specified bucket to a project.
         * @summary Add an existing bucket to a project
         * @param {ProjectApiBindBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindBucket(requestParameters: ProjectApiBindBucketRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectBindBucketResponse> {
            return localVarFp.bindBucket(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to initialize a new project.
         * @summary Create a project
         * @param {ProjectApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: ProjectApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to delete your existing projects.
         * @summary Delete an existing project
         * @param {ProjectApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: ProjectApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectDeleteResponse> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a specific project by projectId.
         * @summary Look up an existing project
         * @param {ProjectApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: ProjectApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve your existing projects.
         * @summary Look up existing projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<ProjectListResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update an existing project.
         * @summary Update an existing project
         * @param {ProjectApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: ProjectApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bindBucket operation in ProjectApi.
 * @export
 * @interface ProjectApiBindBucketRequest
 */
export type ProjectApiBindBucketRequest = {
    
    /**
    * The ID of the project to add the bucket to.
    * @type {number}
    * @memberof ProjectApiBindBucket
    */
    readonly projectId: number
    
} & ProjectBucketBinding

/**
 * Request parameters for create operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateRequest
 */
export type ProjectApiCreateRequest = {
    
} & ProjectCreateRequest

/**
 * Request parameters for delete operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteRequest
 */
export type ProjectApiDeleteRequest = {
    
    /**
    * The ID of the project to delete.
    * @type {string}
    * @memberof ProjectApiDelete
    */
    readonly projectId: string
    
}

/**
 * Request parameters for get operation in ProjectApi.
 * @export
 * @interface ProjectApiGetRequest
 */
export type ProjectApiGetRequest = {
    
    /**
    * The ID of the project to retrieve.
    * @type {string}
    * @memberof ProjectApiGet
    */
    readonly projectId: string
    
}

/**
 * Request parameters for update operation in ProjectApi.
 * @export
 * @interface ProjectApiUpdateRequest
 */
export type ProjectApiUpdateRequest = {
    
    /**
    * The ID of the project to update.
    * @type {string}
    * @memberof ProjectApiUpdate
    */
    readonly projectId: string
    
} & ProjectUpdateRequest

/**
 * ProjectApiGenerated - object-oriented interface
 * @export
 * @class ProjectApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectApiGenerated extends BaseAPI {
    /**
     * Adds the specified bucket to a project.
     * @summary Add an existing bucket to a project
     * @param {ProjectApiBindBucketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public bindBucket(requestParameters: ProjectApiBindBucketRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).bindBucket(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to initialize a new project.
     * @summary Create a project
     * @param {ProjectApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public create(requestParameters: ProjectApiCreateRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to delete your existing projects.
     * @summary Delete an existing project
     * @param {ProjectApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public delete(requestParameters: ProjectApiDeleteRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve a specific project by projectId.
     * @summary Look up an existing project
     * @param {ProjectApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public get(requestParameters: ProjectApiGetRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve your existing projects.
     * @summary Look up existing projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update an existing project.
     * @summary Update an existing project
     * @param {ProjectApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiGenerated
     */
    public update(requestParameters: ProjectApiUpdateRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
