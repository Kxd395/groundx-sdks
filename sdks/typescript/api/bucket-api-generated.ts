/* tslint:disable */
/* eslint-disable */
/**
 * GroundX API
 * Ground Your RAG Apps in Fact not Fiction
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@groundx.ai
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BucketCreateRequest } from '../models';
// @ts-ignore
import { BucketCreateRequestBucket } from '../models';
// @ts-ignore
import { BucketDeleteResponse } from '../models';
// @ts-ignore
import { BucketDetail } from '../models';
// @ts-ignore
import { BucketListResponse } from '../models';
// @ts-ignore
import { BucketResponse } from '../models';
// @ts-ignore
import { BucketUpdateRequest } from '../models';
// @ts-ignore
import { BucketUpdateRequestBucket } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BucketApi - axios parameter creator
 * @export
 */
export const BucketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new bucket for your content.
         * @summary Create a bucket
         * @param {BucketCreateRequest} bucketCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (bucketCreateRequest: BucketCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketCreateRequest' is not null or undefined
            assertParamExists('create', 'bucketCreateRequest', bucketCreateRequest)
            const localVarPath = `/v1/bucket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bucketCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bucketCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a bucket by bucketId.
         * @summary Delete an existing bucket
         * @param {number} bucketId The ID of the bucket to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (bucketId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('delete', 'bucketId', bucketId)
            const localVarPath = `/v1/bucket/{bucketId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Look up a bucket by its bucketId.
         * @summary Look up an existing bucket
         * @param {number} bucketId The ID of the bucket to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (bucketId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('get', 'bucketId', bucketId)
            const localVarPath = `/v1/bucket/{bucketId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Look up existing buckets associated with your account.
         * @summary Look up existing buckets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/bucket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the configurations of an existing bucket.
         * @summary Update an existing bucket
         * @param {number} bucketId The ID of the bucket to update.
         * @param {BucketUpdateRequest} bucketUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (bucketId: number, bucketUpdateRequest: BucketUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('update', 'bucketId', bucketId)
            // verify required parameter 'bucketUpdateRequest' is not null or undefined
            assertParamExists('update', 'bucketUpdateRequest', bucketUpdateRequest)
            const localVarPath = `/v1/bucket/{bucketId}`
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "X-API-Key", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bucketUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bucketUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BucketApi - functional programming interface
 * @export
 */
export const BucketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BucketApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new bucket for your content.
         * @summary Create a bucket
         * @param {BucketApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: BucketApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BucketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a bucket by bucketId.
         * @summary Delete an existing bucket
         * @param {BucketApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: BucketApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BucketDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.bucketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Look up a bucket by its bucketId.
         * @summary Look up an existing bucket
         * @param {BucketApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: BucketApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BucketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.bucketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Look up existing buckets associated with your account.
         * @summary Look up existing buckets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BucketListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the configurations of an existing bucket.
         * @summary Update an existing bucket
         * @param {BucketApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: BucketApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BucketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.bucketId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BucketApi - factory interface
 * @export
 */
export const BucketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BucketApiFp(configuration)
    return {
        /**
         * Create a new bucket for your content.
         * @summary Create a bucket
         * @param {BucketApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: BucketApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<BucketResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a bucket by bucketId.
         * @summary Delete an existing bucket
         * @param {BucketApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: BucketApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<BucketDeleteResponse> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Look up a bucket by its bucketId.
         * @summary Look up an existing bucket
         * @param {BucketApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: BucketApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<BucketResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Look up existing buckets associated with your account.
         * @summary Look up existing buckets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<BucketListResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the configurations of an existing bucket.
         * @summary Update an existing bucket
         * @param {BucketApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: BucketApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<BucketResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in BucketApi.
 * @export
 * @interface BucketApiCreateRequest
 */
export type BucketApiCreateRequest = {
    
} & BucketCreateRequest

/**
 * Request parameters for delete operation in BucketApi.
 * @export
 * @interface BucketApiDeleteRequest
 */
export type BucketApiDeleteRequest = {
    
    /**
    * The ID of the bucket to delete.
    * @type {number}
    * @memberof BucketApiDelete
    */
    readonly bucketId: number
    
}

/**
 * Request parameters for get operation in BucketApi.
 * @export
 * @interface BucketApiGetRequest
 */
export type BucketApiGetRequest = {
    
    /**
    * The ID of the bucket to retrieve.
    * @type {number}
    * @memberof BucketApiGet
    */
    readonly bucketId: number
    
}

/**
 * Request parameters for update operation in BucketApi.
 * @export
 * @interface BucketApiUpdateRequest
 */
export type BucketApiUpdateRequest = {
    
    /**
    * The ID of the bucket to update.
    * @type {number}
    * @memberof BucketApiUpdate
    */
    readonly bucketId: number
    
} & BucketUpdateRequest

/**
 * BucketApiGenerated - object-oriented interface
 * @export
 * @class BucketApiGenerated
 * @extends {BaseAPI}
 */
export class BucketApiGenerated extends BaseAPI {
    /**
     * Create a new bucket for your content.
     * @summary Create a bucket
     * @param {BucketApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketApiGenerated
     */
    public create(requestParameters: BucketApiCreateRequest, options?: AxiosRequestConfig) {
        return BucketApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a bucket by bucketId.
     * @summary Delete an existing bucket
     * @param {BucketApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketApiGenerated
     */
    public delete(requestParameters: BucketApiDeleteRequest, options?: AxiosRequestConfig) {
        return BucketApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Look up a bucket by its bucketId.
     * @summary Look up an existing bucket
     * @param {BucketApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketApiGenerated
     */
    public get(requestParameters: BucketApiGetRequest, options?: AxiosRequestConfig) {
        return BucketApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Look up existing buckets associated with your account.
     * @summary Look up existing buckets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return BucketApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the configurations of an existing bucket.
     * @summary Update an existing bucket
     * @param {BucketApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketApiGenerated
     */
    public update(requestParameters: BucketApiUpdateRequest, options?: AxiosRequestConfig) {
        return BucketApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
