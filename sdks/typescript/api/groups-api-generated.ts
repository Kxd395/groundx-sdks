/* tslint:disable */
/* eslint-disable */
/*
GroundX APIs

RAG Made Simple, Secure and Hallucination Free

The version of the OpenAPI document: 1.3.26
Contact: support@eyelevel.ai

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GroupCreateRequest } from '../models';
// @ts-ignore
import { GroupListResponse } from '../models';
// @ts-ignore
import { GroupResponse } from '../models';
// @ts-ignore
import { GroupUpdateRequest } from '../models';
// @ts-ignore
import { MessageResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary addBucket
         * @param {number} groupId The groupId of the group which the bucket will be added to.
         * @param {number} bucketId The bucketId of the bucket being added to the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBucket: async (groupId: number, bucketId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('addBucket', 'groupId', groupId)
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('addBucket', 'bucketId', bucketId)
            const localVarPath = `/v1/group/{groupId}/bucket/{bucketId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)))
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}/bucket/{bucketId}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary create
         * @param {GroupCreateRequest} groupCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (groupCreateRequest: GroupCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupCreateRequest' is not null or undefined
            assertParamExists('create', 'groupCreateRequest', groupCreateRequest)
            const localVarPath = `/v1/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary delete
         * @param {number} groupId The groupId of the group to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('delete', 'groupId', groupId)
            const localVarPath = `/v1/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary get
         * @param {number} groupId The groupId of the group to look up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (groupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('get', 'groupId', groupId)
            const localVarPath = `/v1/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary list
         * @param {number} [n] The maximum number of returned groups. Accepts 1-100 with a default of 20.
         * @param {string} [nextToken] A token for pagination. If the number of groups for a given query is larger than n, the response will include a \&quot;nextToken\&quot; value. That token can be included in this field to retrieve the next batch of n groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (n?: number, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration })
            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary removeBucket
         * @param {number} groupId The groupId of the group which the bucket will be removed from.
         * @param {number} bucketId The bucketId of the bucket which will be removed from the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBucket: async (groupId: number, bucketId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('removeBucket', 'groupId', groupId)
            // verify required parameter 'bucketId' is not null or undefined
            assertParamExists('removeBucket', 'bucketId', bucketId)
            const localVarPath = `/v1/group/{groupId}/bucket/{bucketId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)))
                .replace(`{${"bucketId"}}`, encodeURIComponent(String(bucketId !== undefined ? bucketId : `-bucketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}/bucket/{bucketId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary update
         * @param {number} groupId The groupId of the group to update.
         * @param {GroupUpdateRequest} groupUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (groupId: number, groupUpdateRequest: GroupUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('update', 'groupId', groupId)
            // verify required parameter 'groupUpdateRequest' is not null or undefined
            assertParamExists('update', 'groupUpdateRequest', groupUpdateRequest)
            const localVarPath = `/v1/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-groupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-Key", keyParamName: "xAPIKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/group/{groupId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary addBucket
         * @param {GroupsApiAddBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBucket(requestParameters: GroupsApiAddBucketRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBucket(requestParameters.groupId, requestParameters.bucketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary create
         * @param {GroupsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: GroupsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse>> {
            const groupCreateRequest: GroupCreateRequest = {
                name: requestParameters.name,
                bucketName: requestParameters.bucketName
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(groupCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary delete
         * @param {GroupsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: GroupsApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary get
         * @param {GroupsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: GroupsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary list
         * @param {GroupsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: GroupsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.n, requestParameters.nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary removeBucket
         * @param {GroupsApiRemoveBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBucket(requestParameters: GroupsApiRemoveBucketRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBucket(requestParameters.groupId, requestParameters.bucketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary update
         * @param {GroupsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: GroupsApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse>> {
            const groupUpdateRequest: GroupUpdateRequest = {
                newName: requestParameters.newName
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.groupId, groupUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary addBucket
         * @param {GroupsApiAddBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBucket(requestParameters: GroupsApiAddBucketRequest, options?: AxiosRequestConfig): AxiosPromise<MessageResponse> {
            return localVarFp.addBucket(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary create
         * @param {GroupsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: GroupsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<GroupResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary delete
         * @param {GroupsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: GroupsApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<MessageResponse> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary get
         * @param {GroupsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: GroupsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<GroupResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary list
         * @param {GroupsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: GroupsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GroupListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary removeBucket
         * @param {GroupsApiRemoveBucketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBucket(requestParameters: GroupsApiRemoveBucketRequest, options?: AxiosRequestConfig): AxiosPromise<MessageResponse> {
            return localVarFp.removeBucket(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
         * @summary update
         * @param {GroupsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: GroupsApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<GroupResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBucket operation in GroupsApi.
 * @export
 * @interface GroupsApiAddBucketRequest
 */
export type GroupsApiAddBucketRequest = {
    
    /**
    * The groupId of the group which the bucket will be added to.
    * @type {number}
    * @memberof GroupsApiAddBucket
    */
    readonly groupId: number
    
    /**
    * The bucketId of the bucket being added to the group.
    * @type {number}
    * @memberof GroupsApiAddBucket
    */
    readonly bucketId: number
    
}

/**
 * Request parameters for create operation in GroupsApi.
 * @export
 * @interface GroupsApiCreateRequest
 */
export type GroupsApiCreateRequest = {
    
} & GroupCreateRequest

/**
 * Request parameters for delete operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteRequest
 */
export type GroupsApiDeleteRequest = {
    
    /**
    * The groupId of the group to be deleted.
    * @type {number}
    * @memberof GroupsApiDelete
    */
    readonly groupId: number
    
}

/**
 * Request parameters for get operation in GroupsApi.
 * @export
 * @interface GroupsApiGetRequest
 */
export type GroupsApiGetRequest = {
    
    /**
    * The groupId of the group to look up.
    * @type {number}
    * @memberof GroupsApiGet
    */
    readonly groupId: number
    
}

/**
 * Request parameters for list operation in GroupsApi.
 * @export
 * @interface GroupsApiListRequest
 */
export type GroupsApiListRequest = {
    
    /**
    * The maximum number of returned groups. Accepts 1-100 with a default of 20.
    * @type {number}
    * @memberof GroupsApiList
    */
    readonly n?: number
    
    /**
    * A token for pagination. If the number of groups for a given query is larger than n, the response will include a \"nextToken\" value. That token can be included in this field to retrieve the next batch of n groups.
    * @type {string}
    * @memberof GroupsApiList
    */
    readonly nextToken?: string
    
}

/**
 * Request parameters for removeBucket operation in GroupsApi.
 * @export
 * @interface GroupsApiRemoveBucketRequest
 */
export type GroupsApiRemoveBucketRequest = {
    
    /**
    * The groupId of the group which the bucket will be removed from.
    * @type {number}
    * @memberof GroupsApiRemoveBucket
    */
    readonly groupId: number
    
    /**
    * The bucketId of the bucket which will be removed from the group.
    * @type {number}
    * @memberof GroupsApiRemoveBucket
    */
    readonly bucketId: number
    
}

/**
 * Request parameters for update operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateRequest
 */
export type GroupsApiUpdateRequest = {
    
    /**
    * The groupId of the group to update.
    * @type {number}
    * @memberof GroupsApiUpdate
    */
    readonly groupId: number
    
} & GroupUpdateRequest

/**
 * GroupsApiGenerated - object-oriented interface
 * @export
 * @class GroupsApiGenerated
 * @extends {BaseAPI}
 */
export class GroupsApiGenerated extends BaseAPI {
    /**
     * Add an existing bucket to an existing group. Buckets and groups can be associated many to many.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
     * @summary addBucket
     * @param {GroupsApiAddBucketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public addBucket(requestParameters: GroupsApiAddBucketRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).addBucket(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new group, a group being a collection of buckets which can be searched.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
     * @summary create
     * @param {GroupsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public create(requestParameters: GroupsApiCreateRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a group.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
     * @summary delete
     * @param {GroupsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public delete(requestParameters: GroupsApiDeleteRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * look up a specific group by its groupId.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
     * @summary get
     * @param {GroupsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public get(requestParameters: GroupsApiGetRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list all groups within your GroundX account.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
     * @summary list
     * @param {GroupsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public list(requestParameters: GroupsApiListRequest = {}, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * remove a bucket from a group. Buckets and groups can be associated many to many, this removes one bucket to group association without disturbing others.  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
     * @summary removeBucket
     * @param {GroupsApiRemoveBucketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public removeBucket(requestParameters: GroupsApiRemoveBucketRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).removeBucket(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rename a group  Interact with the \"Request Body\" below to explore the arguments of this function. Enter your GroundX API key to send a request directly from this web page. Select your language of choice to structure a code snippet based on your specified arguments. 
     * @summary update
     * @param {GroupsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public update(requestParameters: GroupsApiUpdateRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
